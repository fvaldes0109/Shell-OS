
Estas funcionalidades son:

1. Imprimir el prompt: Al ejecutar el programa, y cuando la terminal se encuentra esperando una entrada manual, se muestra el mensaje 'better-call-shell:<workingDir> $ '. Es simplemente colocar un while(1) en el que en cada iteración se imprima dicho prompt, se espere por una entrada del usuario y se procese dicha entrada.

2. Ejecución de comandos: Permite ejecutar cualquier binario que se encuentre en el PATH, o en cualquier ruta relativa o absoluta proporcionada. Es posible pasarle los argv a estos procesos. Para esta funcionalidad se comprueba si el archivo existe en la ruta dada o en el path. De ser así, se ejecuta, pasándole los argv y dos file descriptor para entrada y salida. Los comandos 'history' y 'help' sobreescriben a los del sistema con una implementación existente en este código, pues los comportamientos solicitados en la orientacion son diferentes.

3. Comando cd: El comando cd <dir> se encarga de cambiar la ruta actual por una relativa o absoluta que se proporcione en 'dir'. Para esto siempre guardamos una cadena donde se almacena la ruta actual. Al ejecutar el comando, parseamos la cadena que se pasó como argumento para manejar rutas como '.' o '..'. Para especificar que se trata de una ruta relativa, dicha ruta debe comenzar con el nombre del directorio destino o con './', y para una ruta absoluta debe empezar con '/'.

4-5. Redirigir stdin y stdout entre comandos y ficheros, y tuberías: Se implementaron los operadores '>', '>>', '<', '|'. Al recibir un comando (sin operadores de chain), este se parsea separandolo por estos operadores. Se va leyendo un comando a la vez, y su salida es guardada en un archivo temporal. Al leer el siguiente comando, su entrada estándar será el valor almacenado en este archivo. Esto continúa hasta llegar al último comando o a un archivo donde se colocará la última salida. En caso de que la instrucción final sea un comando, la salida de este se mostrará en la terminal.

6. Una vez terminado el comando previo, se debe mostrar el prompt nuevamente. Esto se logra debido a que al terminar la ejecución de un comando, comienza una nueva iteración del ciclo.

7. Solamente habrá un espacio entre cada uno de los tokens de la entrada: ANULADO. Fue sobreescrito por el punto 11, pues es posible separar los comandos y parametros por cualquier cantidad de espacios.

8. Al escribir exit el shell termina su ejecución con exit status 0. Además al colocar un caracter '# se interpreta que todo lo que aparece a continuación de este es un comentario, y se ignora. Esto último se logra recorriendo la entrada del usuario de izquierda a derecha, y al encontrar un '#' sustituirlo por '\0'.
